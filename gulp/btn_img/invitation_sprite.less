/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@pic-1-name: 'pic_1';
@pic-1-x: 0px;
@pic-1-y: 0px;
@pic-1-offset-x: 0px;
@pic-1-offset-y: 0px;
@pic-1-width: 140px;
@pic-1-height: 140px;
@pic-1-total-width: 140px;
@pic-1-total-height: 1176px;
@pic-1-image: 'invitation_sprite.png';
@pic-1: 0px 0px 0px 0px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_1';
@pic-2-name: 'pic_2';
@pic-2-x: 0px;
@pic-2-y: 148px;
@pic-2-offset-x: 0px;
@pic-2-offset-y: -148px;
@pic-2-width: 140px;
@pic-2-height: 140px;
@pic-2-total-width: 140px;
@pic-2-total-height: 1176px;
@pic-2-image: 'invitation_sprite.png';
@pic-2: 0px 148px 0px -148px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_2';
@pic-3-name: 'pic_3';
@pic-3-x: 0px;
@pic-3-y: 296px;
@pic-3-offset-x: 0px;
@pic-3-offset-y: -296px;
@pic-3-width: 140px;
@pic-3-height: 140px;
@pic-3-total-width: 140px;
@pic-3-total-height: 1176px;
@pic-3-image: 'invitation_sprite.png';
@pic-3: 0px 296px 0px -296px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_3';
@pic-4-name: 'pic_4';
@pic-4-x: 0px;
@pic-4-y: 444px;
@pic-4-offset-x: 0px;
@pic-4-offset-y: -444px;
@pic-4-width: 140px;
@pic-4-height: 140px;
@pic-4-total-width: 140px;
@pic-4-total-height: 1176px;
@pic-4-image: 'invitation_sprite.png';
@pic-4: 0px 444px 0px -444px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_4';
@pic-5-name: 'pic_5';
@pic-5-x: 0px;
@pic-5-y: 592px;
@pic-5-offset-x: 0px;
@pic-5-offset-y: -592px;
@pic-5-width: 140px;
@pic-5-height: 140px;
@pic-5-total-width: 140px;
@pic-5-total-height: 1176px;
@pic-5-image: 'invitation_sprite.png';
@pic-5: 0px 592px 0px -592px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_5';
@pic-6-name: 'pic_6';
@pic-6-x: 0px;
@pic-6-y: 740px;
@pic-6-offset-x: 0px;
@pic-6-offset-y: -740px;
@pic-6-width: 140px;
@pic-6-height: 140px;
@pic-6-total-width: 140px;
@pic-6-total-height: 1176px;
@pic-6-image: 'invitation_sprite.png';
@pic-6: 0px 740px 0px -740px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_6';
@pic-7-name: 'pic_7';
@pic-7-x: 0px;
@pic-7-y: 888px;
@pic-7-offset-x: 0px;
@pic-7-offset-y: -888px;
@pic-7-width: 140px;
@pic-7-height: 140px;
@pic-7-total-width: 140px;
@pic-7-total-height: 1176px;
@pic-7-image: 'invitation_sprite.png';
@pic-7: 0px 888px 0px -888px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_7';
@pic-8-name: 'pic_8';
@pic-8-x: 0px;
@pic-8-y: 1036px;
@pic-8-offset-x: 0px;
@pic-8-offset-y: -1036px;
@pic-8-width: 140px;
@pic-8-height: 140px;
@pic-8-total-width: 140px;
@pic-8-total-height: 1176px;
@pic-8-image: 'invitation_sprite.png';
@pic-8: 0px 1036px 0px -1036px 140px 140px 140px 1176px 'invitation_sprite.png' 'pic_8';
@spritesheet-width: 140px;
@spritesheet-height: 1176px;
@spritesheet-image: 'invitation_sprite.png';
@spritesheet-sprites: @pic-1 @pic-2 @pic-3 @pic-4 @pic-5 @pic-6 @pic-7 @pic-8;
@spritesheet: 140px 1176px 'invitation_sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
